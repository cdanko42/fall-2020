## Problem 1
using Optim
f(x) = -x[1]^4-10x[1]^3-2x[1]^2-3x[1]-2
negf(x) = x[1]^4+10x[1]^3+2x[1]^2+3x[1]+2
startval = rand(1)  # random number as starting value
result = optimize(negf, startval, LBFGS())

## Problem 2
using DataFrames
using CSV
using HTTP
url = "https://raw.githubusercontent.com/OU-PhD-Econometrics/fall-2020/master/ProblemSets/PS1-julia-intro/nlsw88.csv"
df = CSV.read(HTTP.get(url).body)
X = [ones(size(df,1),1) df.age df.race.==1 df.collgrad.==1]
y = df.married.==1

## Solve objective function
function ols(beta, X, y)
    ssr = (y.-X*beta)'*(y.-X*beta)
    return ssr
end

beta_hat_ols = optimize(b -> ols(b, X, y), rand(size(X,2)), LBFGS(), 
                        Optim.Options(g_tol=1e-6, iterations=100_000, 
                        show_trace=true))
println(beta_hat_ols.minimizer)

## Check work
using GLM
bols = inv(X'*X)*X'*y
df.white = df.race.==1
bols_lm = lm(@formula(married ~ age + white + collgrad), df)

## Problem 3
## Create objective function for logit likelihood

function logitregress(beta, X, y)
	for 
	return negloglike
end

## Optimize!

beta_tilde_loglike = optimize(b -> logitregress(b, X, y), rand(size(X,2)), LBFGS(), 
                        Optim.Options(g_tol=1e-6, iterations=100_000, 
                        show_trace=true))
println(beta_tilde_loglike.minimizer)